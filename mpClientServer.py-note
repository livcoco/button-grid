
Portions of mpClientServer.py are included here, with other portions
deleted, to try for an overview of the module.

#!/usr/bin/python2
import multiprocessing
from multiprocessing.managers import SyncManager

*
class BorgTestServer:           # ????????? Does what ??????
    _sharedState = {}
    def __init__(self):  self.__dict__ = self._sharedState

*
class _TestServer:
    def __init__(self):  self.typeString = type('asdf')

    Routines _TestServer.add, sub, mul, div; all along the same lines as add:
    def add(self, a, b):        return a + b
    ...

    Routines _TestServer.cat0, cat1, cat2, cat3, cat4; all along the same lines as cat0:
    def cat0(self, n, d, x, y):
        print ('cat0', n, d, x, y); return 0

**  _TestServer.makeServerManager creates jobQ and resultQ multiprocessing.JoinableQueue
    vars,     and lock, a multiprocessing.Lock.  Then "class JobQueueManager(SyncManager):
    pass", declaring JobQueueManager as basically a renamed SyncManager.  Then via
    JobQueueManager.register() calls, it registers three get-routines: get_job_q,
    get_result_q, and get_lock to access jobQ, resultQ, and lock. Then it says:
        manager = JobQueueManager(address=('', self.portNum), authkey = self.authKey)
        manager.start()
        return manager
    which creates and starts an instance of JobQueueManager.
    Note, per <https://docs.python.org/2/library/multiprocessing.html> sec. 16.6.2.2, "Pipes
    and Queues":  "If you use JoinableQueue then you must call JoinableQueue.task_done() for
    each task removed from the queue or else the semaphore used to count the number of 
    unfinished tasks may eventually overflow, raising an exception"

**  _TestServer.respondToClientRequest(self, methodNameAndArgs, sharedResultQ) checks
    that methodNameAndArgs) matches self.typeString and if so says,
                self.execResult = None
                exec('self.execResult = ' + methodNameAndArgs)
    but if not, says
                methodName = methodNameAndArgs[0]
                sharedResultQ.put(_TestServer.__dict__[methodName](self, *methodNameAndArgs[1:]))
    and may print an exception and add it to sharedResultQ.

*
**  Via "class TestServer(BorgTestServer, _TestServer)", TestServer inherits from both
    BorgTestServer and _TestServer.  It inits BorgTestServer and if _sharedState does not
    exist, inits _TestServer then invokes TestServer.run .
        
**  TestServer.run sets its .serverManager to self.makeServerManager and then loops
    on following:
            queueData = self.jobQ.get()
            self.respondToClientRequest(queueData, self.resultQ)
    jobQ is an instance of a JobQueueManager JoinableQueue, ie, a
    SyncManager JoinableQueue, 

#=================================================================
class TestClientGeneric:
    def serverMethodCall(self, args):
        show = 0
        try:
            self.lock.acquire()
            while not self.resultQ.empty(): # Make the result queue empty
                garbage = self.resultQueue.get()
            if show: print('in serverMethodCall with args', args)
            self.jobQ.put(args)             # Add job with args to job-queue
            data = self.resultQ.get()       # Get result of job
            return data
        finally:
            self.lock.release()

    def makeClientManager(self, ipAddress, portNum, authKey):
        class ServerQueueManager(SyncManager):
            pass

        show = 0
        ServerQueueManager.register('get_job_q')
        ServerQueueManager.register('get_result_q')
        ServerQueueManager.register('get_lock')
        if show: print('starting clientManager at address', (ipAddress, portNum), 'with authkey', authKey)
        manager = ServerQueueManager(address=(ipAddress, portNum), authkey = authKey)
        manager.connect()
        if show: print('client connected to %s:%s'%(ipAddress, portNum))
        return manager

    def startClient(self, ipAddress, portNum, authKey):
        self.manager = self.makeClientManager(ipAddress, portNum, authKey)
        self.jobQ = self.manager.get_job_q()
        self.resultQ = self.manager.get_result_q()
        self.lock = self.manager.get_lock()

class TestClient(TestClientGeneric):
    def __init__(self):
        self.ipAddress = '127.0.0.1'
        self.portNum = TestServer.portNum
        self.authKey = TestServer.authKey
        print('authKey', self.authKey)
        self.startClient(self.ipAddress, self.portNum, self.authKey)
        
    def doOp2(self, op, a, b):
        return self.serverMethodCall((op, a, b))
    
    def doOp4(self, op, n, d, x, y):
        return self.serverMethodCall((op, n, d, x, y))
            
if __name__ == '__main__':
    # Brief tests for client and server.  If attempt to start a client
    # fails, start a server.  The client in this test does 13 RPCs,
    # computing Fibonacci numbers, then exits.
    import time
    import sys
    import signal
    def sigHandler(sig, frame):
        exit(0)
    signal.signal(signal.SIGINT, sigHandler) # Make a clean exit on ctrl-c

    clientRunning = False
    try:
        client = TestClient()
        clientRunning = True    # Got a client started
        print 'Started client'
        a, b = 1,1
        for t in range(13):
            r = client.doOp2('add', a, b)
            print('{} + {} = {}'.format(a,b,r))
            a, b = b, r         # Gen. Fibonacci numbers
            time.sleep(1)
        sys.exit(0)
    except:
        print 'Client exception', sys.exc_info()
    if not clientRunning:
        print 'Starting Server'
        server = TestServer()
        print 'Started Server'

